from mom6_bathy.grid import Grid
from mom6_bathy.topo import Topo
import xarray as xr
import numpy as np
from datetime import datetime
from pathlib import Path
from .ocean_fill_and_grid_interp import super_interp, fill_missing_data, super_sample_grid


def gen_chl_empty_dataset(output_path, lon, lat):
    """
    Generate an empty NetCDF dataset for SeaWiFS chlorophyll climatology and save it to disk.

    This function creates a synthetic xarray dataset with a CHL_A variable (monthly mean chlorophyll)
    initialized entirely with fill values. The dataset uses the provided longitude and latitude
    arrays to define the spatial grid and includes a fixed climatological time axis.

    Parameters
    ----------
    output_path : str or Path
        Path to save the output NetCDF file.

    lon : array-like
        1D array of longitude values (in degrees east) defining the spatial X-axis.

    lat : array-like
        1D array of latitude values (in degrees north) defining the spatial Y-axis.

    Returns
    -------
    ds : xarray.Dataset
        The generated empty dataset containing the CHL_A variable and coordinate metadata.

    Notes
    -----
    - The CHL_A variable is filled with the placeholder value -1e34.
    - The TIME dimension is fixed and marked as unlimited in the NetCDF file.
    - TIME values represent the approximate midpoint of each month in a climatological year.
    - This dataset structure mimics that of SeaWiFS chlorophyll climatology products and is intended
      as a template or placeholder.
    """

    # === Coordinates ===

    time = np.array(
        [15.5, 45, 74.5, 105, 135.5, 166, 196.5, 227.5, 258, 288.5, 319, 349.5]
    )

    # === Placeholder data for CHL_A (all fill values) ===
    fill_value = -1.0e34
    chl_a_data = np.empty((len(time), len(lat), len(lon)), dtype=np.float32)

    # === xarray Dataset ===
    ds = xr.Dataset(
        {
            "CHL_A": xr.DataArray(
                chl_a_data,
                dims=["TIME", "LAT", "LON"],
                coords={"TIME": time, "LAT": lat, "LON": lon},
                attrs={
                    "long_name": "CHL_A = monthly mean",
                    "units": "mg/m^3",
                    "_FillValue": fill_value,
                    "missing_value": fill_value,
                },
            )
        },
        coords={
            "LON": xr.DataArray(
                lon, dims="LON", attrs={"units": "degrees_east", "axis": "X"}
            ),
            "LAT": xr.DataArray(
                lat, dims="LAT", attrs={"units": "degrees_north", "axis": "Y"}
            ),
            "TIME": xr.DataArray(
                time,
                dims="TIME",
                attrs={
                    "units": "days since 0001-01-01 00:00:00",
                    "calendar": "NOLEAP",
                    "modulo": " ",
                    "axis": "T",
                    "cartesian_axis": "T",
                },
            ),
        },
        attrs={  # Global attributes
            "title": "SeaWiFS Chlorophyll Climatology (1997â€“2010)",
            "institution": "Generated by xarray",
            "source": "Simulated data",
            "history": "Created for demonstration",
        },
    )
    # === Save to NetCDF with TIME as unlimited ===
    ds.to_netcdf(output_path, unlimited_dims=["TIME"])

    print(f"Wrote emptyNetCDF file to:\n{output_path}")
    return ds


def interpolate_and_fill_seawifs(
    grid: Grid,
    topo: Topo,
    processed_seawifs_path: Path | str,
):
    
    ocn_mask = topo.tmask
    ocn_nj, ocn_ni = ocn_mask.shape

    src_nc = xr.open_dataset(processed_seawifs_path)
    src_data = src_nc["chlor_a"]
    src_nj, src_ni = src_data.shape[-2], src_data.shape[-1]
    src_lon = src_nc[src_data.dims[-1]]
    src_lat = ((np.arange(src_nj) + 0.5) / src_nj - 0.5) * 180.0  # Recompute as doubles
    src_x0 = int((src_lon[0] + src_lon[-1]) / 2 + 0.5) - 180.0
    src_lon = (
        (np.arange(src_ni) + 0.5) / src_ni
    ) * 360.0 + src_x0  # Recompute as doubles

    spr_lat, spr_lon = super_sample_grid(grid.qlat, grid.qlon, ocn_mask, src_nj, src_ni)
    
    output_path = (
        processed_seawifs_path.parent
        / f"seawifs-clim-1997-2010-{grid.name}.nc"
    )
    chla_tx06 = gen_chl_empty_dataset(output_path, grid.tlon[int(grid.ny/2),:].values, grid.tlat[:,int(grid.nx/2)].values)
    chlor_a = chla_tx06["CHL_A"]

    for t in range(src_data.shape[0]):
        # for t in range(1):
        q_int = super_interp(src_lat, src_lon, src_data[t, ::-1, :], spr_lat, spr_lon)
        q_int = (
            q_int.swapaxes(1, 2)
            .reshape((ocn_nj, ocn_ni, q_int.shape[3] * q_int.shape[-1]))
            .mean(axis=-1)
        )
        q = q_int * ocn_mask
        q_masked = np.ma.masked_where(ocn_mask == 0, q_int)
        chlor_a[t, :] = fill_missing_data(q_masked, ocn_mask)


    # Global attributes
    chla_tx06.attrs["title"] = (
        "Chlorophyll Concentration, OCI Algorithm, interpolated and objectively filled to "
        + grid.name
    )
    chla_tx06.attrs["repository"] = "https://github.com/NCAR/SeaWIFS_MOM6"
    chla_tx06.attrs["authors"] = (
        "Gustavo Marques (gmarques@ucar.edu) and Frank Bryan (bryan@ucar.edu)"
    )
    chla_tx06.attrs["date"] = datetime.now().isoformat()

    # Assign variable data
    chla_tx06["CHL_A"].data[:] = chlor_a
    chla_tx06["LON"].data[:] = grid.tlon[0,:]
    chla_tx06["LAT"].data[:] = grid.tlat[:,0]

    # Write to NetCDF
    chla_tx06.to_netcdf(output_path)



if __name__ == "__main__":
    interpolate_and_fill_seawifs()
